## Pre-declare environmental variables
environment-template-common: &environment-template-common
  DEBIAN_FRONTEND: "noninteractive"
  DEBIAN_PRIORITY: "critical"
  DEBCONF_NOWARNINGS: "yes"
  DEBFULLNAME: "GobySoft CircleCI"
  DEBEMAIL: "toby@gobysoft.org"
  QUILT_PATCHES: debian/patches
  QUILT_REFRESH_ARGS: "-p ab --no-timestamps --no-index --strip-trailing-whitespace"
  
environment-template-amd64: &environment-template-amd64
  TARGET_ARCH: "amd64"
  DEB_BUILD_OPTIONS: "parallel=4"
  BUILD_ARCH: "amd64"  
  # one job only must do the source build for each distro
  DO_SOURCE_BUILD: "true"
  SOURCE_WORKING_DIRECTORY: "/tmp/package-src"
  DOCKER_TAG: "build-base"
  DOCKER_PLATFORM: "linux/amd64"
  
environment-template-arm64: &environment-template-arm64
  TARGET_ARCH: "arm64"
  BUILD_ARCH: "arm64"
  DEB_BUILD_OPTIONS: "parallel=4"
  SOURCE_WORKING_DIRECTORY: "/tmp/package-src"
  DOCKER_TAG: "build-arm64-native"
  DOCKER_PLATFORM: "linux/arm64"

environment-template-armhf: &environment-template-armhf
  TARGET_ARCH: "armhf"
  BUILD_ARCH: "armhf"
  DEB_BUILD_OPTIONS: "parallel=4"
  SOURCE_WORKING_DIRECTORY: "/tmp/package-src"
  DOCKER_TAG: "build-armhf-native"
  DOCKER_PLATFORM: "linux/arm/v7"
  
environment-template-bookworm: &environment-template-bookworm
  DISTRO_RELEASE_CODENAME: "bookworm"
  DISTRO_RELEASE_VERSION: "debian12"
  DOCKER_VERSION: "12.1"
  DOCKER_DISTRO: "debian"

environment-template-jammy: &environment-template-jammy
  DISTRO_RELEASE_CODENAME: "jammy"
  DISTRO_RELEASE_VERSION: "ubuntu22.04"
  DOCKER_VERSION: "22.04.1"  
  DOCKER_DISTRO: "ubuntu"

environment-template-noble: &environment-template-noble
  DISTRO_RELEASE_CODENAME: "noble"
  DISTRO_RELEASE_VERSION: "ubuntu24.04"
  DOCKER_VERSION: "24.04.1"  
  DOCKER_DISTRO: "ubuntu"

  
## Pre-declare Docker containers
docker-base-noble: &docker-base-noble
  - image: gobysoft/ubuntu-build-base:22.04.1
    
## Pre-declare job templates
job-template-amd64: &job-template-amd64
  working_directory: /tmp/debian
  machine:
    image: ubuntu-2204:current
  resource_class: large
  steps:
    - checkout
    - run: &run-install-apt
        name: Install apt packages
        command: sudo apt-get update && sudo apt-get -y --no-install-recommends install git devscripts equivs quilt
    - attach-workspace: &attach-src-workspace
        at: /tmp/src
    - run: &run-extract-src
        name: Extract the original source tarball
        command: |
          cp /tmp/src/*.orig.tar.gz ${CIRCLE_WORKING_DIRECTORY}/.. &&
          mkdir -p ${SOURCE_WORKING_DIRECTORY} && cd ${SOURCE_WORKING_DIRECTORY} &&
          tar xfz ../*.orig.tar.gz --strip-components=1
    - run: &run-nest-deb
        name: Nest debian source into project source
        command: cp -r ${CIRCLE_WORKING_DIRECTORY} ${SOURCE_WORKING_DIRECTORY} && rm -rf ${SOURCE_WORKING_DIRECTORY}/debian/.git
    - run: &run-dch
        name: Generate original source tarball and add changelog entry 
        command: |
          cd ${SOURCE_WORKING_DIRECTORY} &&
          export NEWVERSION="$(echo ../*.orig.tar.gz | sed 's/.*_\(.*\)\.orig\.tar\.gz/\1/')"
          COMMENT="Autobuild for version ${NEWVERSION}" &&
          dch --newversion=${NEWVERSION}-1~${DISTRO_RELEASE_VERSION}.1 -D ${DISTRO_RELEASE_CODENAME} "${COMMENT}"
    - run: &run-build-pkg
        name: Build the Debian package in docker
        command: |
          docker run --platform ${DOCKER_PLATFORM} --env GPG_KEY --env SOURCE_WORKING_DIRECTORY --env TARGET_ARCH --env BUILD_ARCH --env DO_SOURCE_BUILD -v /tmp:/tmp -w ${SOURCE_WORKING_DIRECTORY} -t gobysoft/${DOCKER_DISTRO}-${DOCKER_TAG}:${DOCKER_VERSION} bash -c "${SOURCE_WORKING_DIRECTORY}/debian/.circleci/build.sh"
    - run: &run-store-next-build
        name: Store deb files for next build
        command: |
          cd ${SOURCE_WORKING_DIRECTORY} &&
          mkdir -p /tmp/output &&
          find .. -maxdepth 1 -type f -exec cp {}  /tmp/output \; &&
          rm -f /tmp/output/*-build-deps*.deb
    - run: &run-store-for-artifacts
        name: Store deb files for storing artifacts
        command: mkdir -p /tmp/deb && cp /tmp/output/* /tmp/deb
    - store_artifacts: &store
        path: /tmp/deb
    - run: &remove-orig-source
        name: Remove original source file to avoid conflicts in merging
        command: |        
          rm -f /tmp/deb/*.orig.tar.gz || true
    - persist_to_workspace: &persist-debs
        root: /tmp/deb
        paths:
          - '*.dsc'
          - '*.tar.xz'
          - '*.deb'
          - '*.ddeb'
          - '*.changes'
          - '*.buildinfo'
          - '*.diff.gz'  

job-template-arm: &job-template-arm
  <<: *job-template-amd64
  resource_class: arm.large
  steps:
    - checkout
    - run: *run-install-apt
    - attach-workspace: *attach-src-workspace
    - run: *run-extract-src
    - run: *run-nest-deb
    - run: *run-dch
    - run: *run-build-pkg
    - run: *run-store-next-build
    - run: *run-store-for-artifacts
    - store_artifacts: *store
    - run: *remove-orig-source
    - persist_to_workspace: *persist-debs

job-template-upload: &job-template-upload
  <<: *job-template-amd64
  docker: *docker-base-noble
  
## Begin actual config
version: 2
workflows:
  version: 2
  commit:
    jobs:
      - get-orig-source

      - amd64-bookworm-build:
          requires:
            - get-orig-source
      - arm64-bookworm-build:
          requires:
            - get-orig-source
      - armhf-bookworm-build:
          requires:
            - get-orig-source

      - amd64-jammy-build:
          requires:
            - get-orig-source
      - arm64-jammy-build:
          requires:
            - get-orig-source
      - armhf-jammy-build:
          requires:
            - get-orig-source

      - amd64-noble-build:
          requires:
            - get-orig-source
      - arm64-noble-build:
          requires:
            - get-orig-source
      - armhf-noble-build:
          requires:
            - get-orig-source

            
      - continuous-upload:
          requires:
            - amd64-bookworm-build
            - arm64-bookworm-build
            - armhf-bookworm-build
            - amd64-jammy-build
            - arm64-jammy-build
            - armhf-jammy-build
            - amd64-noble-build
            - arm64-noble-build
            - armhf-noble-build

      - release-upload:
          requires:
            - continuous-upload
jobs:
  get-orig-source:
    <<: *job-template-amd64
    docker: *docker-base-noble
    environment:
      <<: *environment-template-common
      <<: *environment-template-noble
      <<: *environment-template-amd64
    steps:
      - checkout
      - run:
          name: Get original source tarball
          command: |
            cd ..
            uscan --verbose -dd
            mkdir -p /tmp/src
            mv ../*.tar.gz /tmp/src
      - store_artifacts:
          path: /tmp/src
      - persist_to_workspace:
          root: /tmp/src
          paths:
            - '*.tar.gz'
            
  amd64-bookworm-build:
    <<: *job-template-amd64
    environment:
      <<: *environment-template-common
      <<: *environment-template-bookworm
      <<: *environment-template-amd64
  arm64-bookworm-build:
    <<: *job-template-arm
    environment:
      <<: *environment-template-common
      <<: *environment-template-bookworm
      <<: *environment-template-arm64
  armhf-bookworm-build:
    <<: *job-template-arm
    environment:
      <<: *environment-template-common
      <<: *environment-template-bookworm
      <<: *environment-template-armhf

  amd64-jammy-build:
    <<: *job-template-amd64
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-amd64
  arm64-jammy-build:
    <<: *job-template-arm
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-arm64
  armhf-jammy-build:
    <<: *job-template-arm
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-armhf

  amd64-noble-build:
    <<: *job-template-amd64
    environment:
      <<: *environment-template-common
      <<: *environment-template-noble
      <<: *environment-template-amd64
  arm64-noble-build:
    <<: *job-template-arm
    environment:
      <<: *environment-template-common
      <<: *environment-template-noble
      <<: *environment-template-arm64
  armhf-noble-build:
    <<: *job-template-arm
    environment:
      <<: *environment-template-common
      <<: *environment-template-noble
      <<: *environment-template-armhf

      
  continuous-upload:
    <<: *job-template-upload
    environment:
      <<: *environment-template-common
      <<: *environment-template-noble
      <<: *environment-template-amd64
      UPLOAD_DESTINATION: "gobysoft-continuous"
    steps: &steps-upload
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cd:15:c9:43:48:20:c9:56:58:9e:91:01:74:0d:fe:d2"
      - run:
          name: Import GPG key
          command: echo -e "$GPG_KEY" | gpg --import
      - attach-workspace:
          at: /tmp/deb
      - attach-workspace: *attach-src-workspace
      - run:
          name: Move original source into output directory
          command: mv /tmp/src/* /tmp/deb
      - run:
          name: Upload packages to packages.gobysoft.org
          command: |
            echo 'trusted-key A8E48CFF6650A07F6EF2B9AD19478082E2F8D3FE' >> ~/.gnupg/gpg.conf
            echo '|1|HjIjI40ko7XtgqXNK8DNuiVcy4Q=|7PEGcXNRmsj1tzGeRjb9UgWIWwE= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIK8LmTLyo7inmKCa28F2JZBSpQFT1VrwnFpeV1v6PlQE' >> ~/.ssh/known_hosts
            for change_file in /tmp/deb/*.changes;
            do dput -c ${CIRCLE_WORKING_DIRECTORY}/.circleci/dput.cf ${UPLOAD_DESTINATION} $change_file;
            done
          

  release-upload:
    <<: *job-template-upload
    environment:
      <<: *environment-template-common
      <<: *environment-template-noble
      <<: *environment-template-amd64
      UPLOAD_DESTINATION: "gobysoft-release"
    steps: *steps-upload
